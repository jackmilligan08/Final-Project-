import turtle
from turtle import * 
import random
import pygame
import time
import re 

#MUSIC 
#must use quit (q) key to stop music
#otherwise you have to close entire idle shell 
def play_audio():
    global pause 
    if not pause:
        pygame.init()
        #loading in sound 
        backgroundsound="sound1.wav"
        pygame.mixer.music.load(backgroundsound)
        #-1 allows music to always play 
        pygame.mixer.music.play(-1)
        
#MOVEMENT FUNCTIONS
        
def movement():
    turtle.onkey(p1right, "d")
    turtle.onkey(p1left, "a")
    turtle.onkey(p2right, "Right")
    turtle.onkey(p2left, "Left")
    turtle.onkey(Quit, "q")
    turtle.onkey(pausegame, "space") 
    
    p1borders()
    p2borders()

p1right=False 
p1left=False
p1right=False
p1left=False 


def p1right():
    global pause 
    if not pause:
        p1xcor = player1.xcor()
        player1.setx(p1xcor+playerxVelright)
        p1right=True
        if p1right==True: 
        #todo - possibly optimize by only setting shape if it changed direction 5/15
            player1.shape("player1right.gif")
        else:
            p1right=False

def p1left():
    global pause 
    if not pause:
        p1xcor = player1.xcor()
        player1.setx(p1xcor+playerxVelleft)
        player1.shape("player1left.gif")

def p2right():
    global pause 
    if not pause:
        p2xcor = player2.xcor()
        player2.setx(p2xcor+playerxVelright)
        player2.shape("player2right.gif")

def p2left():
    global pause
    if not pause:
        p2xcor = player2.xcor()
        player2.setx(p2xcor+playerxVelleft)
        player2.shape("player2left.gif")


def p1borders():
    p1xcor = player1.xcor()
    if p1xcor>RIGHT_EDGE:
        player1.setx(-1*p1xcor+25)
    if p1xcor<LEFT_EDGE:
        player1.setx(-1*p1xcor-25)

def p2borders():
    p2xcor = player2.xcor()
    if p2xcor>RIGHT_EDGE:
        player2.setx(-1*p2xcor+25)
    if p2xcor<LEFT_EDGE:
        player2.setx(-1*p2xcor-25)
    return

def p1collisions():
    return

def p2collisions():
    return

#SCOREBOARD FUNCTIONS

def background():
    player_names()

def writescoreboard():
    scoreboard.clear() 
    p1text = playernames[0]
    p2text = playernames[1]

    #variables 
    bothplayer = p1text + "   " + p2text
    noplayer = "P1" + "        "+  "P2"
    nop1 = "P1" + "      " + p2text 
    nop2 = p1text + "     " +  "P2"
    
    #both no name 
    if playernames[0] == "" and playernames[1] == "": 
        scoreboard.write(noplayer,  font=("Courier",45, "bold"), align = "center")
    #no player1 name 
    elif playernames[0] == "":
        scoreboard.write(nop1, font=("Courier",45, "bold"), align = "center")
         
    #no player 2 name    
    elif playernames[1] == "": 
        scoreboard.write(nop2,  font=("Courier",45, "bold"), align = "center")
    #both player names 
    else:
        scoreboard.write(bothplayer, font=("Courier",45, "bold"), align = "center")

def healthscoreboard():
    global p1, p2
    scoreboard2.clear()
    healthprompt = "Health: " + str(p1health) + "           "  "Health: "  + str(p2health)
    scoreboard2.write(healthprompt, font=("Courier", 25, "bold"), align = "center")

def winner():
    def 
    
def player_names():
    p1name = screen.textinput("Player 1", "Player 1's name?")
    playernames.append(p1name)
    p2name = screen.textinput("Player 2", "Player 2's name")
    playernames.append(p2name) 

def pause_hud():
    scoreboard3.clear()
    pauseprompt = "Game Paused"
    scoreboard3.write(pauseprompt ,font=("Courier", 50, "bold"), align = "center")

#PAUSE AND QUIT GAME
    
def pausegame():
    global pause
    if (pause == True):
        scoreboard3.reset()
        scoreboard3.penup()
        scoreboard3.goto(0,-10) 
        scoreboard3.hideturtle()
        pause = False

    elif (pause == False):
        pause_hud() 
        pause = True  
        
    return 

def Quit():
    global running
    running = False
    gamequit = screen.textinput("Quit", "(Quit: Yes or No?)")
    if re.match("^[Y, y]", gamequit):
        pygame.mixer.music.stop() 
        turtle.bye()
        
    else:
        running = True


#lists
playernames = [] 

#Global
running = True

pause = False  

p1health = 100
p2health = 100

#Constants
playerxVelright = 30
playerxVelleft = -30

RIGHT_EDGE=440
LEFT_EDGE=-440

#Screen Setup (Version1) 
screen=turtle.Screen()
screen.setup(850,515)
screen.title("Bombs Away")
screen.bgcolor("skyblue")
screen.tracer(0)  
screen.bgpic(picname="bg3.gif")


#Adding Turtles
#adding player1 (aircraft carrier) 
player1=Turtle()

player1.penup() 
turtle.addshape(name="player1right.gif", shape=None)
player1.shape("player1right.gif")
player1.setx(-200)
player1.sety(-175) 

#adding player2 (#helicopter carrier)
player2=Turtle()

player2.penup() 
turtle.addshape(name="player2left.gif", shape=None)
player2.shape("player2left.gif")
player2.setx(200)
player2.sety(-172) 


#Adding shapes 
turtle.addshape(name="player1right.gif", shape=None)
turtle.addshape(name="player1left.gif", shape=None)
turtle.addshape(name="player2right.gif", shape=None)
turtle.addshape(name="player2left.gif", shape=None)

#creating scoreboard
scoreboard=turtle.Turtle()
scoreboard.penup()
scoreboard.goto(0,200) 
scoreboard.hideturtle()
scoreboard.color("Black")

#health scoreboard 
scoreboard2=turtle.Turtle()
scoreboard2.penup()
scoreboard2.goto(0,170) 
scoreboard2.hideturtle()
scoreboard2.color("Red")

#pause prompt 
scoreboard3=turtle.Turtle()
scoreboard3.penup()
scoreboard3.goto(0,-10) 
scoreboard3.hideturtle()
scoreboard3.color("Black") 


#audio for later
bombsound = "explosion.wav" 

#Functions not used in while true loop
background()
#out of main loop to prevent lag 
writescoreboard() 
play_audio()


#main loop
while running:
    screen.update()
    turtle.listen()
    if not (pause):
        healthscoreboard()
        movement()
    



